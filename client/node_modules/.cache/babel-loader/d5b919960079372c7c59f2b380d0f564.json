{"ast":null,"code":"var _jsxFileName = \"/Users/russellsutter/Development/Flatiron/code/Mod4/mod4-project-frontend/src/Components/Game.js\";\nimport React from \"react\";\nimport { withRouter } from 'react-router-dom';\nimport Question from './Question';\nconst BASE_API = 'http://localhost:3000';\nconst BASESTATE = {\n  allQuestions: [],\n  filteredQuestions: [],\n  category: this.props.category,\n  numberOfQuestions: this.props.numberOfQuestions,\n  difficulty: this.props.difficulty\n};\n\nclass Game extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      allQuestions: [],\n      filteredQuestions: [],\n      category: this.props.category,\n      numberOfQuestions: this.props.numberOfQuestions,\n      difficulty: this.props.difficulty\n    };\n\n    this.shuffle = a => {\n      var j, x, i;\n\n      for (i = a.length - 1; i > 0; i--) {\n        j = Math.floor(Math.random() * (i + 1));\n        x = a[i];\n        a[i] = a[j];\n        a[j] = x;\n      }\n\n      return a;\n    };\n\n    this.setQuestions = () => {\n      let filteredArray = this.state.allQuestions.filter(question => {\n        if (question.category === this.state.category && question.difficulty === this.state.difficulty) {\n          return question;\n        }\n      });\n      let shuffledArray = this.shuffle(filteredArray);\n      let slicedArray = shuffledArray.slice(0, this.state.numberOfQuestions);\n      this.setState({\n        filteredQuestions: slicedArray\n      });\n    };\n\n    this.nextQuestion = value => {\n      if (this.state.filteredQuestions !== 0) {\n        console.log(value);\n        this.props.updateScore(value);\n        setTimeout(this.updateQuestions, 4000);\n      } else {\n        this.state({});\n      }\n    };\n\n    this.updateQuestions = () => {\n      let newArray = this.state.filteredQuestions.shift();\n      this.setState({\n        filteredArray: newArray\n      });\n      this.setState(prevState => ({\n        questionsLeft: prevState.questionsLeft - 1\n      }));\n    };\n\n    this.renderQuestion = () => {\n      let singleQuestion = this.state.filteredQuestions.slice(0, 1);\n      return /*#__PURE__*/React.createElement(Question, {\n        key: singleQuestion.id,\n        question: singleQuestion[0],\n        shuffle: this.shuffle,\n        nextQuestion: this.nextQuestion,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 16\n        }\n      });\n    };\n  }\n\n  componentDidMount() {\n    console.log(this.state);\n    fetch(`${BASE_API}/questions`).then(resp => resp.json()).then(data => this.setState({\n      allQuestions: data\n    })).then(() => this.setQuestions());\n  }\n\n  capitalize(str) {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 23\n      }\n    }, \"Category: \", this.capitalize(this.state.category)), /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 80\n      }\n    }, \"Difficulty: \", this.capitalize(this.state.difficulty)), /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 141\n      }\n    }, \"Questions Left: \", this.state.filteredQuestions.length), /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 203\n      }\n    }, \"Current Score: \", this.props.score)), this.renderQuestion());\n  }\n\n}\n\nexport default withRouter(Game);","map":{"version":3,"sources":["/Users/russellsutter/Development/Flatiron/code/Mod4/mod4-project-frontend/src/Components/Game.js"],"names":["React","withRouter","Question","BASE_API","BASESTATE","allQuestions","filteredQuestions","category","props","numberOfQuestions","difficulty","Game","Component","state","shuffle","a","j","x","i","length","Math","floor","random","setQuestions","filteredArray","filter","question","shuffledArray","slicedArray","slice","setState","nextQuestion","value","console","log","updateScore","setTimeout","updateQuestions","newArray","shift","prevState","questionsLeft","renderQuestion","singleQuestion","id","componentDidMount","fetch","then","resp","json","data","capitalize","str","charAt","toUpperCase","render","score"],"mappings":"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","sourcesContent":["import React from \"react\"\nimport { withRouter } from 'react-router-dom'\nimport Question from './Question'\n\nconst BASE_API = 'http://localhost:3000'\n\nconst BASESTATE = {\n        allQuestions: [],\n        filteredQuestions: [],\n        category: this.props.category,\n        numberOfQuestions: this.props.numberOfQuestions,\n        difficulty: this.props.difficulty,\n    }\n\n\nclass Game extends React.Component {\n\n    state = {\n        allQuestions: [],\n        filteredQuestions: [],\n        category: this.props.category,\n        numberOfQuestions: this.props.numberOfQuestions,\n        difficulty: this.props.difficulty,\n    }\n\n    componentDidMount() {\n        console.log(this.state)\n        fetch(`${BASE_API}/questions`)\n            .then(resp => resp.json())\n            .then(data => this.setState({ allQuestions: data }))\n            .then(() => this.setQuestions() )\n    }\n\n\n    capitalize(str){\n        return str.charAt(0).toUpperCase() + str.slice(1);\n    }\n\n    shuffle = (a) =>  {\n    var j, x, i;\n    for (i = a.length - 1; i > 0; i--) {\n        j = Math.floor(Math.random() * (i + 1));\n        x = a[i];\n        a[i] = a[j];\n        a[j] = x;\n    }\n    return a;\n    }\n\n    setQuestions = () => {\n        let filteredArray = this.state.allQuestions.filter(question => {\n            if ((question.category === this.state.category) && (question.difficulty === this.state.difficulty)) {\n                return question\n            }\n        })\n        let shuffledArray = this.shuffle(filteredArray)\n        let slicedArray = shuffledArray.slice(0, this.state.numberOfQuestions)\n        this.setState({ filteredQuestions: slicedArray })\n    }\n\n    nextQuestion = (value) => {\n        if (this.state.filteredQuestions !== 0) {\n            console.log(value)\n            this.props.updateScore(value)\n            setTimeout(this.updateQuestions, 4000)\n        } else {\n            this.state({})\n        }\n    }\n\n    updateQuestions = () => {\n        let newArray = this.state.filteredQuestions.shift()\n        this.setState({ filteredArray: newArray })\n        this.setState(prevState => ({ questionsLeft: prevState.questionsLeft - 1 }))\n    }\n\n    renderQuestion = () => {\n        let singleQuestion = this.state.filteredQuestions.slice(0, 1);\n        return <Question key={singleQuestion.id} question={singleQuestion[0]} shuffle={this.shuffle} nextQuestion={this.nextQuestion}/>\n    }\n\n    render() {\n        return (\n            <div>\n                <span><h1>Category: {this.capitalize(this.state.category)}</h1><h1>Difficulty: {this.capitalize(this.state.difficulty)}</h1><h1>Questions Left: {this.state.filteredQuestions.length}</h1><h1>Current Score: {this.props.score}</h1></span>\n                {this.renderQuestion()}\n            </div>\n        )\n    }\n}\n\n\nexport default withRouter(Game)"]},"metadata":{},"sourceType":"module"}