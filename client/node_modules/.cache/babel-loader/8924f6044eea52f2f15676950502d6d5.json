{"ast":null,"code":"var _jsxFileName = \"/Users/russellsutter/Development/Flatiron/code/Mod4/mod4-project/mod4-project-frontend/client/src/Components/Chat.js\";\nimport React from 'react';\nimport { Button, Form } from 'react-bootstrap';\nimport io from 'socket.io-client';\n\nclass Chat extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.renderMessages = () => {\n      return this.state.messages.map((message, index) => {\n        return /*#__PURE__*/React.createElement(\"p\", {\n          key: index,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 20\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          className: \"author\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 35\n          }\n        }, message.author), \" say: \", /*#__PURE__*/React.createElement(\"span\", {\n          className: \"message\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 89\n          }\n        }, message.message));\n      });\n    };\n\n    this.state = {\n      user: this.props.user.name,\n      message: '',\n      messages: []\n    };\n    this.socket = io('localhost:3002');\n    this.socket.on('receive message', data => {\n      console.log(data);\n      this.setState({\n        messages: [...this.state.messages, data],\n        message: ''\n      });\n    });\n\n    this.componentDidMount = () => {\n      if (this.state.user === '') {\n        this.socket.emit('user joined', {\n          author: this.props.user.name,\n          message: \"has joined the server.\"\n        });\n      }\n    };\n\n    this.submitMessage = e => {\n      e.preventDefault();\n      this.socket.emit('new message', {\n        author: this.props.user.name,\n        message: this.state.message\n      });\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"chat-room\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"ul\", {\n      id: \"messages\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 13\n      }\n    }, this.renderMessages()), /*#__PURE__*/React.createElement(Form, {\n      inline: true,\n      className: \"chat-form\",\n      onSubmit: this.submitMessage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Form.Control, {\n      type: \"text\",\n      id: \"\",\n      autocomplete: \"off\",\n      placeholder: \"Type your Message Here\",\n      value: this.state.message,\n      onChange: e => this.setState({\n        message: e.target.value\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      id: \"\",\n      variant: \"dark\",\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 21\n      }\n    }, \"Send\")));\n  }\n\n}\n\nexport default Chat;","map":{"version":3,"sources":["/Users/russellsutter/Development/Flatiron/code/Mod4/mod4-project/mod4-project-frontend/client/src/Components/Chat.js"],"names":["React","Button","Form","io","Chat","Component","constructor","props","renderMessages","state","messages","map","message","index","author","user","name","socket","on","data","console","log","setState","componentDidMount","emit","submitMessage","e","preventDefault","render","target","value"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { Button, Form } from 'react-bootstrap'\nimport io from 'socket.io-client'\n\n\nclass Chat extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            user: this.props.user.name,\n            message: '',\n            messages: [],\n        }\n        this.socket = io('localhost:3002')\n\n        this.socket.on('receive message', (data) => {\n            console.log(data)\n            this.setState({messages: [...this.state.messages, data], message: ''})\n        })\n\n        this.componentDidMount = () => {\n        if ( this.state.user === '' ) {\n            this.socket.emit('user joined', {\n                author: this.props.user.name,\n                message: \"has joined the server.\"\n            })\n            }\n        }\n\n        this.submitMessage = (e) => {\n            e.preventDefault()\n            this.socket.emit('new message', {\n                author: this.props.user.name,\n                message: this.state.message\n            })\n        }\n    }\n\n\n\n\n    renderMessages = () => {\n        return this.state.messages.map((message, index) => { \n            return <p key={index}><span className=\"author\">{message.author}</span> say: <span className=\"message\">{message.message}</span></p>\n        })\n    }\n\n    render() {\n        return (\n        <div className=\"chat-room\">\n            <ul id=\"messages\">\n                {this.renderMessages()}\n            </ul>\n            <Form inline className=\"chat-form\" onSubmit={this.submitMessage}>\n                    <Form.Control\n                        type=\"text\"\n                        id=\"\"\n                        autocomplete=\"off\"\n                        placeholder=\"Type your Message Here\"\n                        value={this.state.message}\n                        onChange={(e) => this.setState({ message: e.target.value })}/>\n                    <br/>\n                    <Button id=\"\" variant=\"dark\" type=\"submit\">Send</Button>\n            </Form>\n        </div>\n        )\n    }\n\n}\n\nexport default Chat"]},"metadata":{},"sourceType":"module"}