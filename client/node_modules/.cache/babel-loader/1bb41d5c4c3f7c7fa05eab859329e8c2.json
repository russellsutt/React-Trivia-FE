{"ast":null,"code":"var _jsxFileName = \"/Users/tim/Flatiron/code/mod4/Mod4-Project-Frontend/client/src/Components/Leaderboard.js\";\nimport React, { Component } from 'react';\nimport { Table, Button } from 'react-bootstrap';\nconst BASE_API = 'http://localhost:3000';\n\nclass Leaderboard extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      allScores: [],\n      filteredScores: [],\n      submitted: this.props.submitted\n    };\n\n    this.componentDidMount = () => {\n      fetch('http://localhost:3000/scores').then(r => r.json()).then(data => {\n        this.setState({\n          allScores: data\n        });\n      }).then(() => this.filterScores()).then(() => this.sortScores());\n      console.log(this.state.filteredScores);\n    };\n\n    this.filterScores = () => {\n      //console.log(this.state.allScores)\n      let newArray = this.state.allScores.filter(score => {\n        return score.user.id === this.props.user.id;\n      }); //console.log(newArray)\n\n      this.setState({\n        filteredScores: newArray\n      });\n    };\n\n    this.sortScores = () => {\n      let newArray = this.state.filteredScores.sort((a, b) => {\n        return a.points - b.points;\n      });\n      this.setState({\n        filteredScores: newArray\n      });\n    };\n\n    this.renderScores = () => {\n      console.log(this.state.filteredScores);\n      return this.state.filteredScores.map((score, index) => /*#__PURE__*/React.createElement(\"tr\", {\n        key: index,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 29\n        }\n      }, \" \", score.points, \" / \", score.questions), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 73\n        }\n      }, \" \", this.capitalize(score.category), \" \"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 117\n        }\n      }, \" \", this.capitalize(score.difficulty))));\n    };\n\n    this.submitScore = () => {\n      const questions = parseInt(this.props.numberOfQuestions);\n      fetch(BASE_API + \"/scores\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Accepts\": \"application/json\"\n        },\n        body: JSON.stringify({\n          points: this.props.score,\n          difficulty: this.props.difficulty,\n          category: this.props.category,\n          questions: questions,\n          user_id: this.props.user.id\n        })\n      }).then(resp => resp.json()).then(resp => console.log(resp)).then(resp => this.setState({\n        submitted: true\n      }));\n    };\n  }\n\n  capitalize(str) {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }\n    }, \"Past Games\"), /*#__PURE__*/React.createElement(Table, {\n      className: \"leaderboard\",\n      variant: \"dark\",\n      responsive: true,\n      striped: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"thead\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"u\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 33\n      }\n    }, \"Score\")), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"u\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 33\n      }\n    }, \"Category\")), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"u\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 33\n      }\n    }, \"Difficulty\")))), /*#__PURE__*/React.createElement(\"tbody\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 21\n      }\n    }, this.renderScores())), /*#__PURE__*/React.createElement(Button, {\n      variant: \"dark\",\n      disabled: this.state.submitted,\n      onClick: () => this.submitScore(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }\n    }, \"Submit Score!\"), /*#__PURE__*/React.createElement(Button, {\n      variant: \"dark\",\n      onClick: () => this.props.resetState(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }\n    }, \"New Game\"));\n  }\n\n}\n\nexport default Leaderboard;","map":{"version":3,"sources":["/Users/tim/Flatiron/code/mod4/Mod4-Project-Frontend/client/src/Components/Leaderboard.js"],"names":["React","Component","Table","Button","BASE_API","Leaderboard","state","allScores","filteredScores","submitted","props","componentDidMount","fetch","then","r","json","data","setState","filterScores","sortScores","console","log","newArray","filter","score","user","id","sort","a","b","points","renderScores","map","index","questions","capitalize","category","difficulty","submitScore","parseInt","numberOfQuestions","method","headers","body","JSON","stringify","user_id","resp","str","charAt","toUpperCase","slice","render","resetState"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,KAAT,EAAgBC,MAAhB,QAA8B,iBAA9B;AAEA,MAAMC,QAAQ,GAAG,uBAAjB;;AAEA,MAAMC,WAAN,SAA0BJ,SAA1B,CAAoC;AAAA;AAAA;AAAA,SAEhCK,KAFgC,GAExB;AACJC,MAAAA,SAAS,EAAE,EADP;AAEJC,MAAAA,cAAc,EAAE,EAFZ;AAGJC,MAAAA,SAAS,EAAE,KAAKC,KAAL,CAAWD;AAHlB,KAFwB;;AAAA,SAShCE,iBATgC,GASZ,MAAM;AACtBC,MAAAA,KAAK,CAAC,8BAAD,CAAL,CACCC,IADD,CACMC,CAAC,IAAIA,CAAC,CAACC,IAAF,EADX,EAEKF,IAFL,CAEUG,IAAI,IAAI;AAAE,aAAKC,QAAL,CAAc;AAAEV,UAAAA,SAAS,EAAES;AAAb,SAAd;AAAoC,OAFxD,EAGKH,IAHL,CAGU,MAAM,KAAKK,YAAL,EAHhB,EAIKL,IAJL,CAIU,MAAM,KAAKM,UAAL,EAJhB;AAKIC,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKf,KAAL,CAAWE,cAAvB;AACP,KAhB+B;;AAAA,SAkBhCU,YAlBgC,GAkBjB,MAAM;AACjB;AACA,UAAII,QAAQ,GAAG,KAAKhB,KAAL,CAAWC,SAAX,CAAqBgB,MAArB,CAA4BC,KAAK,IAAI;AAChD,eAAOA,KAAK,CAACC,IAAN,CAAWC,EAAX,KAAkB,KAAKhB,KAAL,CAAWe,IAAX,CAAgBC,EAAzC;AACH,OAFc,CAAf,CAFiB,CAKjB;;AACA,WAAKT,QAAL,CAAc;AAAET,QAAAA,cAAc,EAAEc;AAAlB,OAAd;AACH,KAzB+B;;AAAA,SA+BhCH,UA/BgC,GA+BnB,MAAM;AACf,UAAIG,QAAQ,GAAG,KAAKhB,KAAL,CAAWE,cAAX,CAA0BmB,IAA1B,CAA+B,CAACC,CAAD,EAAIC,CAAJ,KAAU;AAAE,eAAOD,CAAC,CAACE,MAAF,GAAWD,CAAC,CAACC,MAApB;AAA4B,OAAvE,CAAf;AACA,WAAKb,QAAL,CAAc;AAAET,QAAAA,cAAc,EAAEc;AAAlB,OAAd;AACH,KAlC+B;;AAAA,SAoChCS,YApCgC,GAoCjB,MAAM;AACjBX,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKf,KAAL,CAAWE,cAAvB;AACA,aAAO,KAAKF,KAAL,CAAWE,cAAX,CAA0BwB,GAA1B,CAA8B,CAACR,KAAD,EAAQS,KAAR,kBACjC;AAAI,QAAA,GAAG,EAAEA,KAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAMT,KAAK,CAACM,MAAZ,SAAuBN,KAAK,CAACU,SAA7B,CAAhB,eAA4D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAM,KAAKC,UAAL,CAAgBX,KAAK,CAACY,QAAtB,CAAN,MAA5D,eAAwG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAM,KAAKD,UAAL,CAAgBX,KAAK,CAACa,UAAtB,CAAN,CAAxG,CADG,CAAP;AAGH,KAzC+B;;AAAA,SA2ChCC,WA3CgC,GA2ClB,MAAM;AAChB,YAAMJ,SAAS,GAAGK,QAAQ,CAAC,KAAK7B,KAAL,CAAW8B,iBAAZ,CAA1B;AACA5B,MAAAA,KAAK,CAACR,QAAQ,GAAG,SAAZ,EAAuB;AACxBqC,QAAAA,MAAM,EAAE,MADgB;AAExBC,QAAAA,OAAO,EAAE;AACL,0BAAgB,kBADX;AAEL,qBAAW;AAFN,SAFe;AAMxBC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjBf,UAAAA,MAAM,EAAE,KAAKpB,KAAL,CAAWc,KADF;AAEjBa,UAAAA,UAAU,EAAE,KAAK3B,KAAL,CAAW2B,UAFN;AAGjBD,UAAAA,QAAQ,EAAE,KAAK1B,KAAL,CAAW0B,QAHJ;AAIjBF,UAAAA,SAAS,EAAEA,SAJM;AAKjBY,UAAAA,OAAO,EAAE,KAAKpC,KAAL,CAAWe,IAAX,CAAgBC;AALR,SAAf;AANkB,OAAvB,CAAL,CAcKb,IAdL,CAcUkC,IAAI,IAAIA,IAAI,CAAChC,IAAL,EAdlB,EAeKF,IAfL,CAeUkC,IAAI,IAAI3B,OAAO,CAACC,GAAR,CAAY0B,IAAZ,CAflB,EAgBKlC,IAhBL,CAgBUkC,IAAI,IAAI,KAAK9B,QAAL,CAAc;AAAER,QAAAA,SAAS,EAAE;AAAb,OAAd,CAhBlB;AAiBH,KA9D+B;AAAA;;AA2BhC0B,EAAAA,UAAU,CAACa,GAAD,EAAK;AACX,WAAOA,GAAG,CAACC,MAAJ,CAAW,CAAX,EAAcC,WAAd,KAA8BF,GAAG,CAACG,KAAJ,CAAU,CAAV,CAArC;AACH;;AAmCDC,EAAAA,MAAM,GAAG;AAEL,wBACI,uDACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,eAEI,oBAAC,KAAD;AAAO,MAAA,SAAS,EAAC,aAAjB;AAA+B,MAAA,OAAO,EAAC,MAAvC;AAA8C,MAAA,UAAU,MAAxD;AAAyD,MAAA,OAAO,MAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAJ,CADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAJ,CAFJ,eAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAJ,CAHJ,CADJ,CADJ,eAQI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKrB,YAAL,EADL,CARJ,CAFJ,eAeI,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,MAAhB;AAAuB,MAAA,QAAQ,EAAE,KAAKzB,KAAL,CAAWG,SAA5C;AAAuD,MAAA,OAAO,EAAE,MAAM,KAAK6B,WAAL,EAAtE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAfJ,eAgBI,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,MAAhB;AAAuB,MAAA,OAAO,EAAE,MAAM,KAAK5B,KAAL,CAAW2C,UAAX,EAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAhBJ,CADJ;AAoBH;;AAtF+B;;AA4FpC,eAAehD,WAAf","sourcesContent":["import React, { Component } from 'react'\nimport { Table, Button } from 'react-bootstrap'\n\nconst BASE_API = 'http://localhost:3000'\n\nclass Leaderboard extends Component {\n\n    state = {\n        allScores: [],\n        filteredScores: [],\n        submitted: this.props.submitted\n    }\n\n\n    componentDidMount = () => {\n        fetch('http://localhost:3000/scores')\n        .then(r => r.json())\n            .then(data => { this.setState({ allScores: data }) })\n            .then(() => this.filterScores())\n            .then(() => this.sortScores())\n            console.log(this.state.filteredScores)\n    }\n    \n    filterScores = () => {\n        //console.log(this.state.allScores)\n        let newArray = this.state.allScores.filter(score => {\n            return score.user.id === this.props.user.id\n        })\n        //console.log(newArray)\n        this.setState({ filteredScores: newArray })\n    }\n\n    capitalize(str){\n        return str.charAt(0).toUpperCase() + str.slice(1);\n    }\n\n    sortScores = () => {\n        let newArray = this.state.filteredScores.sort((a, b) => { return a.points - b.points })\n        this.setState({ filteredScores: newArray })\n    }\n\n    renderScores = () => {\n        console.log(this.state.filteredScores)\n        return this.state.filteredScores.map((score, index) => \n            <tr key={index}><td> {score.points} / {score.questions}</td><td> {this.capitalize(score.category)} </td><td> {this.capitalize(score.difficulty)}</td></tr>\n        )\n    }\n\n    submitScore = () => {\n        const questions = parseInt(this.props.numberOfQuestions)\n        fetch(BASE_API + \"/scores\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Accepts\": \"application/json\"\n            },\n            body: JSON.stringify({\n                points: this.props.score,\n                difficulty: this.props.difficulty,\n                category: this.props.category,\n                questions: questions,\n                user_id: this.props.user.id\n            })\n        })\n            .then(resp => resp.json())\n            .then(resp => console.log(resp))\n            .then(resp => this.setState({ submitted: true }))\n    }\n\n    render (){\n\n        return (\n            <>\n                <h4>Past Games</h4>\n                <Table className=\"leaderboard\" variant='dark' responsive striped >\n                    <thead>\n                        <tr>\n                            <th><u>Score</u></th>\n                            <th><u>Category</u></th>\n                            <th><u>Difficulty</u></th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {this.renderScores()}\n                    </tbody>\n                </Table>\n                \n                <Button variant=\"dark\" disabled={this.state.submitted} onClick={() => this.submitScore()}>Submit Score!</Button>\n                <Button variant=\"dark\" onClick={() => this.props.resetState()} >New Game</Button>\n            </>\n        )\n    }\n\n\n\n}\n\nexport default Leaderboard"]},"metadata":{},"sourceType":"module"}