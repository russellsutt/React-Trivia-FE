{"ast":null,"code":"var _jsxFileName = \"/Users/russellsutter/Development/Flatiron/code/Mod4/mod4-project-frontend/src/Components/Game.js\";\nimport React from \"react\";\nimport { withRouter } from 'react-router-dom';\nimport Question from './Question';\nconst BASE_API = 'http://localhost:3000';\n\nclass Game extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      allQuestions: [],\n      filteredQuestions: [],\n      category: this.props.category,\n      numberOfQuestions: this.props.numberOfQuestions,\n      difficulty: this.props.difficulty\n    };\n\n    this.shuffle = a => {\n      var j, x, i;\n\n      for (i = a.length - 1; i > 0; i--) {\n        j = Math.floor(Math.random() * (i + 1));\n        x = a[i];\n        a[i] = a[j];\n        a[j] = x;\n      }\n\n      return a;\n    };\n\n    this.setQuestions = () => {\n      let filteredArray = this.state.allQuestions.filter(question => {\n        if (question.category === this.state.category && question.difficulty === this.state.difficulty) {\n          return question;\n        }\n      });\n      let shuffledArray = this.shuffle(filteredArray);\n      let slicedArray = shuffledArray.slice(0, this.state.numberOfQuestions);\n      this.setState({\n        filteredQuestions: slicedArray\n      });\n    };\n\n    this.nextQuestion = value => {\n      if (this.state.filteredQuestions !== 0) {\n        this.props.updateScore(value);\n        setTimeout(this.updateQuestions(value), 1000);\n      } else {}\n    };\n\n    this.updateQuestions = () => {\n      let newArray = this.state.filteredQuestions.shift();\n      this.setState({\n        filteredArray: newArray\n      });\n      this.setState(prevState => ({\n        questionsLeft: prevState.questionsLeft - 1\n      }));\n    };\n\n    this.renderQuestion = () => {\n      let singleQuestion = this.state.filteredQuestions.slice(0, 1);\n      return /*#__PURE__*/React.createElement(Question, {\n        key: singleQuestion.id,\n        question: singleQuestion[0],\n        shuffle: this.shuffle,\n        nextQuestion: this.nextQuestion,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 16\n        }\n      });\n    };\n\n    this.submitScore = () => {\n      fetch(BASE_API + \"/scores\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Accepts\": \"application/json\"\n        },\n        body: JSON.stringify({\n          score: this.propsscore,\n          user: this.props.user.id\n        })\n      }).then(resp => resp.json()).then(resp => console.log(resp));\n    };\n  }\n\n  componentDidMount() {\n    fetch(`${BASE_API}/questions`).then(resp => resp.json()).then(data => this.setState({\n      allQuestions: data\n    })).then(() => this.setQuestions());\n  }\n\n  componentDidUpdate() {}\n\n  capitalize(str) {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 27\n      }\n    }, \"Category: \", this.capitalize(this.state.category)), /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 84\n      }\n    }, \"Difficulty: \", this.capitalize(this.state.difficulty)), /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 145\n      }\n    }, \"Questions Left: \", this.state.filteredQuestions.length), /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 207\n      }\n    }, \"Current Score: \", this.props.score, \" / \", this.props.numberOfQuestions)), this.state.filteredQuestions.length === 0 ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 68\n      }\n    }, \"Thank you for playing!\"), \" \", /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.submitScore(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 100\n      }\n    }, \"Submit Score!\"), \" \", /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.props.newGame(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 166\n      }\n    }, \"New Game\"), \" \") : /*#__PURE__*/React.createElement(React.Fragment, null, this.renderQuestion())));\n  }\n\n}\n\nexport default withRouter(Game);","map":{"version":3,"sources":["/Users/russellsutter/Development/Flatiron/code/Mod4/mod4-project-frontend/src/Components/Game.js"],"names":["React","withRouter","Question","BASE_API","Game","Component","state","allQuestions","filteredQuestions","category","props","numberOfQuestions","difficulty","shuffle","a","j","x","i","length","Math","floor","random","setQuestions","filteredArray","filter","question","shuffledArray","slicedArray","slice","setState","nextQuestion","value","updateScore","setTimeout","updateQuestions","newArray","shift","prevState","questionsLeft","renderQuestion","singleQuestion","id","submitScore","fetch","method","headers","body","JSON","stringify","score","propsscore","user","then","resp","json","console","log","componentDidMount","data","componentDidUpdate","capitalize","str","charAt","toUpperCase","render","newGame"],"mappings":"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","sourcesContent":["import React from \"react\"\nimport { withRouter } from 'react-router-dom'\nimport Question from './Question'\n\nconst BASE_API = 'http://localhost:3000'\n\nclass Game extends React.Component {\n\n    state = {\n        allQuestions: [],\n        filteredQuestions: [],\n        category: this.props.category,\n        numberOfQuestions: this.props.numberOfQuestions,\n        difficulty: this.props.difficulty,\n    }\n\n    componentDidMount() {\n        fetch(`${BASE_API}/questions`)\n            .then(resp => resp.json())\n            .then(data => this.setState({ allQuestions: data }))\n            .then(() => this.setQuestions() )\n    }\n    componentDidUpdate() {\n    }\n\n\n    capitalize(str){\n        return str.charAt(0).toUpperCase() + str.slice(1);\n    }\n\n    shuffle = (a) =>  {\n    var j, x, i;\n    for (i = a.length - 1; i > 0; i--) {\n        j = Math.floor(Math.random() * (i + 1));\n        x = a[i];\n        a[i] = a[j];\n        a[j] = x;\n    }\n    return a;\n    }\n\n    setQuestions = () => {\n        let filteredArray = this.state.allQuestions.filter(question => {\n            if ((question.category === this.state.category) && (question.difficulty === this.state.difficulty)) {\n                return question\n            }\n        })\n        let shuffledArray = this.shuffle(filteredArray)\n        let slicedArray = shuffledArray.slice(0, this.state.numberOfQuestions)\n        this.setState({ filteredQuestions: slicedArray })\n    }\n\n    nextQuestion = (value) => {\n        if (this.state.filteredQuestions !== 0) {\n            this.props.updateScore(value)\n            setTimeout(this.updateQuestions(value), 1000)\n        } else {\n        }\n    }\n\n    updateQuestions = () => {\n\n        let newArray = this.state.filteredQuestions.shift()\n        this.setState({ filteredArray: newArray })\n        this.setState(prevState => ({ questionsLeft: prevState.questionsLeft - 1 }))\n    }\n\n    renderQuestion = () => {\n        let singleQuestion = this.state.filteredQuestions.slice(0, 1);\n        return <Question key={singleQuestion.id} question={singleQuestion[0]} shuffle={this.shuffle} nextQuestion={this.nextQuestion}/>\n    }\n\n    submitScore = () => {\n        fetch(BASE_API + \"/scores\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Accepts\": \"application/json\"\n            },\n            body: JSON.stringify({\n                score: this.propsscore,\n                user: this.props.user.id\n            })\n        })\n        .then(resp => resp.json())\n        .then(resp => console.log(resp))\n    }\n\n    render() {\n        return (\n            <> \n                <div>\n                    <span><h1>Category: {this.capitalize(this.state.category)}</h1><h1>Difficulty: {this.capitalize(this.state.difficulty)}</h1><h1>Questions Left: {this.state.filteredQuestions.length}</h1><h1>Current Score: {this.props.score} / {this.props.numberOfQuestions}</h1></span>\n                    {this.state.filteredQuestions.length === 0 ? <><h1>Thank you for playing!</h1> <button onClick={() => this.submitScore()}>Submit Score!</button> <button onClick={() => this.props.newGame() }>New Game</button> </>: <>{this.renderQuestion()}</>}\n                </div>\n            </>\n        )\n    }\n}\n\n\nexport default withRouter(Game)"]},"metadata":{},"sourceType":"module"}