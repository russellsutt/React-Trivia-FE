{"ast":null,"code":"var _jsxFileName = \"/Users/russellsutter/Development/Flatiron/code/Mod4/mod4-project-frontend/src/Components/Game.js\";\nimport React from \"react\";\nimport { withRouter } from 'react-router-dom';\nimport Question from './Question';\nconst BASE_API = 'http://localhost:3000';\n\nclass Game extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      allQuestions: [],\n      filteredQuestions: [],\n      category: this.props.category,\n      numberOfQuestions: this.props.numberOfQuestions,\n      difficulty: this.props.difficulty,\n      questionsLeft: this.props.numberOfQuestions\n    };\n\n    this.shuffle = a => {\n      var j, x, i;\n\n      for (i = a.length - 1; i > 0; i--) {\n        j = Math.floor(Math.random() * (i + 1));\n        x = a[i];\n        a[i] = a[j];\n        a[j] = x;\n      }\n\n      return a;\n    };\n\n    this.setQuestions = () => {\n      let filteredArray = this.state.allQuestions.filter(question => {\n        if (question.category === this.state.category && question.difficulty === this.state.difficulty) {\n          return question;\n        }\n      });\n      let shuffledArray = this.shuffle(filteredArray);\n      let slicedArray = shuffledArray.slice(0, 10);\n      this.setState({\n        filteredQuestions: slicedArray\n      });\n    };\n\n    this.nextQuestion = value => {\n      if (this.state.filteredQuestions !== 0) {\n        console.log(value);\n        this.props.updateScore(value);\n        let newArray = this.state.filteredQuestions.shift();\n        this.setState({\n          filteredArray: newArray\n        });\n        this.setState(prevState => ({\n          questionsLeft: prevState.questionsLeft - 1\n        }));\n      }\n    };\n\n    this.renderQuestion = () => {\n      let singleQuestion = this.state.filteredQuestions.slice(0, 1);\n      return /*#__PURE__*/React.createElement(Question, {\n        key: singleQuestion.id,\n        question: singleQuestion[0],\n        shuffle: this.shuffle,\n        nextQuestion: this.nextQuestion,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 16\n        }\n      });\n    };\n  }\n\n  componentDidMount() {\n    fetch(`${BASE_API}/questions`).then(resp => resp.json()).then(data => this.setState({\n      allQuestions: data\n    })).then(() => this.setQuestions());\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 23\n      }\n    }, \"Category: \", this.state.category), /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 63\n      }\n    }, \"Difficulty: \", this.state.difficulty), /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 107\n      }\n    }, this.state.numberOfQuestionsLeft), /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 150\n      }\n    }, \"Current Score: \", this.props.score)), this.renderQuestion());\n  }\n\n}\n\nexport default withRouter(Game);","map":{"version":3,"sources":["/Users/russellsutter/Development/Flatiron/code/Mod4/mod4-project-frontend/src/Components/Game.js"],"names":["React","withRouter","Question","BASE_API","Game","Component","state","allQuestions","filteredQuestions","category","props","numberOfQuestions","difficulty","questionsLeft","shuffle","a","j","x","i","length","Math","floor","random","setQuestions","filteredArray","filter","question","shuffledArray","slicedArray","slice","setState","nextQuestion","value","console","log","updateScore","newArray","shift","prevState","renderQuestion","singleQuestion","id","componentDidMount","fetch","then","resp","json","data","render","numberOfQuestionsLeft","score"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,OAAOC,QAAP,MAAqB,YAArB;AAEA,MAAMC,QAAQ,GAAG,uBAAjB;;AAEA,MAAMC,IAAN,SAAmBJ,KAAK,CAACK,SAAzB,CAAmC;AAAA;AAAA;AAAA,SAE/BC,KAF+B,GAEvB;AACJC,MAAAA,YAAY,EAAE,EADV;AAEJC,MAAAA,iBAAiB,EAAE,EAFf;AAGJC,MAAAA,QAAQ,EAAE,KAAKC,KAAL,CAAWD,QAHjB;AAIJE,MAAAA,iBAAiB,EAAE,KAAKD,KAAL,CAAWC,iBAJ1B;AAKJC,MAAAA,UAAU,EAAE,KAAKF,KAAL,CAAWE,UALnB;AAMJC,MAAAA,aAAa,EAAE,KAAKH,KAAL,CAAWC;AANtB,KAFuB;;AAAA,SAkB/BG,OAlB+B,GAkBpBC,CAAD,IAAQ;AAClB,UAAIC,CAAJ,EAAOC,CAAP,EAAUC,CAAV;;AACA,WAAKA,CAAC,GAAGH,CAAC,CAACI,MAAF,GAAW,CAApB,EAAuBD,CAAC,GAAG,CAA3B,EAA8BA,CAAC,EAA/B,EAAmC;AAC/BF,QAAAA,CAAC,GAAGI,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBJ,CAAC,GAAG,CAArB,CAAX,CAAJ;AACAD,QAAAA,CAAC,GAAGF,CAAC,CAACG,CAAD,CAAL;AACAH,QAAAA,CAAC,CAACG,CAAD,CAAD,GAAOH,CAAC,CAACC,CAAD,CAAR;AACAD,QAAAA,CAAC,CAACC,CAAD,CAAD,GAAOC,CAAP;AACH;;AACD,aAAOF,CAAP;AACH,KA3BkC;;AAAA,SA6B/BQ,YA7B+B,GA6BhB,MAAM;AACjB,UAAIC,aAAa,GAAG,KAAKlB,KAAL,CAAWC,YAAX,CAAwBkB,MAAxB,CAA+BC,QAAQ,IAAI;AAC3D,YAAKA,QAAQ,CAACjB,QAAT,KAAsB,KAAKH,KAAL,CAAWG,QAAlC,IAAgDiB,QAAQ,CAACd,UAAT,KAAwB,KAAKN,KAAL,CAAWM,UAAvF,EAAoG;AAChG,iBAAOc,QAAP;AACH;AACJ,OAJmB,CAApB;AAKA,UAAIC,aAAa,GAAG,KAAKb,OAAL,CAAaU,aAAb,CAApB;AACA,UAAII,WAAW,GAAGD,aAAa,CAACE,KAAd,CAAoB,CAApB,EAAuB,EAAvB,CAAlB;AACA,WAAKC,QAAL,CAAc;AAAEtB,QAAAA,iBAAiB,EAAEoB;AAArB,OAAd;AACH,KAtC8B;;AAAA,SAwC/BG,YAxC+B,GAwCfC,KAAD,IAAW;AACtB,UAAI,KAAK1B,KAAL,CAAWE,iBAAX,KAAiC,CAArC,EAAwC;AACpCyB,QAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,aAAKtB,KAAL,CAAWyB,WAAX,CAAuBH,KAAvB;AACA,YAAII,QAAQ,GAAG,KAAK9B,KAAL,CAAWE,iBAAX,CAA6B6B,KAA7B,EAAf;AACA,aAAKP,QAAL,CAAc;AAAEN,UAAAA,aAAa,EAAEY;AAAjB,SAAd;AACA,aAAKN,QAAL,CAAcQ,SAAS,KAAK;AAAEzB,UAAAA,aAAa,EAAEyB,SAAS,CAACzB,aAAV,GAA0B;AAA3C,SAAL,CAAvB;AACH;AACJ,KAhD8B;;AAAA,SAkD/B0B,cAlD+B,GAkDd,MAAM;AACnB,UAAIC,cAAc,GAAG,KAAKlC,KAAL,CAAWE,iBAAX,CAA6BqB,KAA7B,CAAmC,CAAnC,EAAsC,CAAtC,CAArB;AACA,0BAAO,oBAAC,QAAD;AAAU,QAAA,GAAG,EAAEW,cAAc,CAACC,EAA9B;AAAkC,QAAA,QAAQ,EAAED,cAAc,CAAC,CAAD,CAA1D;AAA+D,QAAA,OAAO,EAAE,KAAK1B,OAA7E;AAAsF,QAAA,YAAY,EAAE,KAAKiB,YAAzG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACH,KArD8B;AAAA;;AAW/BW,EAAAA,iBAAiB,GAAG;AAChBC,IAAAA,KAAK,CAAE,GAAExC,QAAS,YAAb,CAAL,CACKyC,IADL,CACUC,IAAI,IAAIA,IAAI,CAACC,IAAL,EADlB,EAEKF,IAFL,CAEUG,IAAI,IAAI,KAAKjB,QAAL,CAAc;AAAEvB,MAAAA,YAAY,EAAEwC;AAAhB,KAAd,CAFlB,EAGKH,IAHL,CAGU,MAAM,KAAKrB,YAAL,EAHhB;AAIH;;AAyCDyB,EAAAA,MAAM,GAAG;AACL,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAe,KAAK1C,KAAL,CAAWG,QAA1B,CAAN,eAA8C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAiB,KAAKH,KAAL,CAAWM,UAA5B,CAA9C,eAA0F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAK,KAAKN,KAAL,CAAW2C,qBAAhB,CAA1F,eAAqI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAoB,KAAKvC,KAAL,CAAWwC,KAA/B,CAArI,CADJ,EAEK,KAAKX,cAAL,EAFL,CADJ;AAMH;;AAhE8B;;AAqEnC,eAAetC,UAAU,CAACG,IAAD,CAAzB","sourcesContent":["import React from \"react\"\nimport { withRouter } from 'react-router-dom'\nimport Question from './Question'\n\nconst BASE_API = 'http://localhost:3000'\n\nclass Game extends React.Component {\n\n    state = {\n        allQuestions: [],\n        filteredQuestions: [],\n        category: this.props.category,\n        numberOfQuestions: this.props.numberOfQuestions,\n        difficulty: this.props.difficulty,\n        questionsLeft: this.props.numberOfQuestions,\n    }\n\n    componentDidMount() {\n        fetch(`${BASE_API}/questions`)\n            .then(resp => resp.json())\n            .then(data => this.setState({ allQuestions: data }))\n            .then(() => this.setQuestions() )\n    }\n\n    shuffle = (a) =>  {\n    var j, x, i;\n    for (i = a.length - 1; i > 0; i--) {\n        j = Math.floor(Math.random() * (i + 1));\n        x = a[i];\n        a[i] = a[j];\n        a[j] = x;\n    }\n    return a;\n}\n\n    setQuestions = () => {\n        let filteredArray = this.state.allQuestions.filter(question => {\n            if ((question.category === this.state.category) && (question.difficulty === this.state.difficulty)) {\n                return question\n            }\n        })\n        let shuffledArray = this.shuffle(filteredArray)\n        let slicedArray = shuffledArray.slice(0, 10)\n        this.setState({ filteredQuestions: slicedArray })\n    }\n\n    nextQuestion = (value) => {\n        if (this.state.filteredQuestions !== 0) {\n            console.log(value)\n            this.props.updateScore(value)\n            let newArray = this.state.filteredQuestions.shift()\n            this.setState({ filteredArray: newArray })\n            this.setState(prevState => ({ questionsLeft: prevState.questionsLeft - 1 }))\n        }\n    }\n\n    renderQuestion = () => {\n        let singleQuestion = this.state.filteredQuestions.slice(0, 1);\n        return <Question key={singleQuestion.id} question={singleQuestion[0]} shuffle={this.shuffle} nextQuestion={this.nextQuestion}/>\n    }\n\n\n\n    render() {\n        return (\n            <div>\n                <span><h1>Category: {this.state.category}</h1><h1>Difficulty: {this.state.difficulty}</h1><h1>{this.state.numberOfQuestionsLeft}</h1><h1>Current Score: {this.props.score}</h1></span>\n                {this.renderQuestion()}\n            </div>\n        )\n    }\n\n}\n\n\nexport default withRouter(Game)"]},"metadata":{},"sourceType":"module"}